1. Comandos Básicos para Iniciar y Configurar Git
Configuración de usuario
git config --global user.name "Tu Nombre"
git config --global user.email "tuemail@example.com"
Define el nombre de usuario y el correo electrónico para tus commits.

Inicializar un Repositorio
git init
Crea un nuevo repositorio en la carpeta actual.

Clonar un Repositorio
git clone <url_del_repositorio>
Copia un repositorio existente desde una URL a tu máquina local.

2. Comandos para Gestionar Cambios
Estado del Repositorio
git status
Muestra el estado actual de la rama, archivos modificados, sin seguimiento, en staging, etc.

Añadir Cambios al Área de Preparación (Staging)
git add <archivo>
git add .
Mueve archivos específicos o todos los cambios al área de staging.

Confirmar Cambios (Commit)
git commit -m "Mensaje del commit"
Guarda los cambios del área de staging en el historial de commits.

Modificar el Último Commit
git commit --amend -m "Nuevo mensaje"
Edita el último commit, útil si olvidaste algo o necesitas cambiar el mensaje.

3. Visualizar Historial
Ver Historial de Commits
git log
Muestra el historial de commits de la rama actual. Puedes usar opciones para ver más detalles:

git log --oneline
git log --graph --all --decorate
Mostrar Cambios (Diff)

git diff
Muestra las diferencias entre el área de trabajo y el último commit.

git diff --staged
Muestra las diferencias entre el área de staging y el último commit.

4. Deshacer Cambios
Quitar Cambios No Confirmados
git checkout -- <archivo>
Descarta cambios no confirmados en un archivo específico, restaurándolo al último commit.

Deshacer Cambios en el Área de Staging
git reset <archivo>
Saca un archivo del área de staging, pero mantiene los cambios en el área de trabajo.

Deshacer el Último Commit
Mantener los cambios en staging:
git reset --soft HEAD~1
Quitar los cambios de staging y área de trabajo:
git reset --hard HEAD~1

Crear un commit inverso (sin modificar el historial):
git revert HEAD
Reset a un Commit Anterior

git reset --hard <commit_hash>
Regresa al estado de un commit específico. Ten cuidado: perderás los cambios posteriores si no los has guardado.

5. Trabajo con Ramas
Crear una Nueva Rama

git branch <nombre_de_la_rama>
Crea una nueva rama sin cambiarte a ella.

Cambiar de Rama
git checkout <nombre_de_la_rama>
Cambia a una rama existente.

Crear y Cambiar a una Nueva Rama
git checkout -b <nombre_de_la_rama>
Crea y cambia a una nueva rama en un solo paso.

Ver Todas las Ramas
git branch
Lista todas las ramas locales. Puedes ver ramas remotas con -r o ambas con -a.

Borrar una Rama
git branch -d <nombre_de_la_rama>
Elimina una rama local que ya ha sido fusionada.

Fusionar Ramas
git merge <nombre_de_la_rama>
Fusiona la rama especificada en la rama actual.

Rebasing (Rebase)
git rebase <rama_base>
Reorganiza los commits de una rama para que se apliquen sobre la rama base.

6. Trabajo con Repositorios Remotos
Verificar Repositorios Remotos
git remote -v
Lista los repositorios remotos vinculados al repositorio local.

Agregar un Repositorio Remoto
git remote add origin <url>
Vincula un repositorio remoto (generalmente llamado origin) a tu repositorio local.

Subir Cambios al Remoto
git push origin <nombre_de_la_rama>
Sube los cambios de la rama especificada al repositorio remoto.

Forzar un Push
git push --force
Fuerza la subida de los cambios (cuidado, puede sobrescribir el historial remoto).

Obtener Cambios del Remoto
git pull origin <nombre_de_la_rama>
Combina los cambios de la rama remota en tu rama actual.

7. Stashing: Guardar Cambios Temporalmente
Guardar Cambios sin Confirmar
git stash
Guarda temporalmente los cambios sin confirmar y deja el área de trabajo limpia.

Ver el Historial de Stash
git stash list
Lista todos los stashes guardados.

Recuperar el Último Stash
git stash apply
Aplica el último stash al área de trabajo.

Eliminar el Último Stash
git stash drop
Elimina el último stash del historial.

8. Comandos Avanzados y Otras Herramientas Útiles
Limpiar Archivos No Rastreados
git clean -f
Elimina los archivos no rastreados en el área de trabajo.

Borrar un Archivo del Repositorio sin Eliminarlo Localmente
git rm --cached <archivo>
Elimina el archivo del repositorio, pero lo mantiene en tu sistema de archivos local.

Reescribir el Historial (Rebase Interactivo)
git rebase -i <commit_hash>
Permite modificar, combinar, o eliminar commits antiguos en la rama actual. Ideal para limpiar el historial antes de enviar los cambios.

Cherry-Pick (Seleccionar Commits Individuales)
git cherry-pick <commit_hash>
Aplica un commit específico de otra rama en la rama actual.

9. Comandos para Colaboración y Resolución de Conflictos
Verificar Cambios Pendientes en Ramas Remotas
git fetch
Obtiene actualizaciones del repositorio remoto sin combinarlas en tu rama actual.

Resolver Conflictos en una Fusión o Rebase
Cuando ocurre un conflicto, edita los archivos para resolver los conflictos, luego:
git add <archivo>
git commit
O usa git merge --abort para cancelar la fusión o git rebase --abort para cancelar el rebase.

10. Git Bisect (Para Encontrar Bugs)
bash
Copiar código
git bisect start
git bisect bad
git bisect good <commit_hash>
Realiza una búsqueda binaria entre commits para localizar el commit donde ocurrió un bug.
